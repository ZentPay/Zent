name: Build
on:
  push:
  pull_request:
  release:
    types: [published]
 
env:
  TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM    
  ubuntu_22_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 22.04 - GCC 9', 'Ubuntu 22.04 - Clang 12', 'Ubuntu 22.04 - aarch64']
        include:
          - build_name: 'Ubuntu 22.04 - GCC 9'
            package_name: 'gcc-9 g++-9'
            cc: gcc-9
            cxx: g++-9
            label: linux
            deployable: true
          - build_name: 'Ubuntu 22.04 - Clang 12'
            package_name: 'clang-12'
            cc: clang-12
            cxx: clang++-12
            label: ubuntu-22.04-linux-clang-11
            deployable: false
          - build_name: 'Ubuntu 22.04 - aarch64'
            label: aarch64
            deployable: true
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        if: matrix.build_name != 'Ubuntu 22.04 - aarch64'
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
      - name: Setup ccache
        run: |
          sudo apt install ccache
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        if: matrix.build_name != 'Ubuntu 22.04 - aarch64'
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
      # Build for linux
      - name: Build
        if: matrix.build_name != 'Ubuntu 22.04 - aarch64'
        run: |
          cd build
          make 
      # Build for aarch64
      - name: Prepare and Build (Ubuntu 22.04 - aarch64)
        if: matrix.build_name == 'Ubuntu 22.04 - aarch64'
        run: |
          source scripts/prep-aarch64.sh
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
          make -j2
          cd src
          TARGETS="Zentd miner zentwallet cryptotest Zent-service wallet-api wallet-upgrader"
          ${STRIP} ${TARGETS}
      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'Ubuntu 22.04 - aarch64'
        run: |
          cd build/src
          ./cryptotest      
            
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="Zentd miner zentwallet cryptotest Zent-service wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf ZentCash-${TAG}
          mkdir ZentCash-${TAG}
          cp ${TARGETS} ZentCash-${TAG}/
          cp ../../LICENSE ZentCash-${TAG}/
          tar cvfz ZentCash-${TAG}-${LABEL}.tar.gz ZentCash-${TAG}/
          ls -la
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZentCash-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/ZentCash-${{ github.sha }}
          
      
  ubuntu_24_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 24.04 - GCC 13', 'Ubuntu 24.04 - Clang 16']
        include:
          - build_name: 'Ubuntu 24.04 - GCC 13'
            package_name: 'gcc-13 g++-13'
            cc: gcc-13
            cxx: g++-13
            label: ubuntu-24.04-linux-gcc-13
            deployable: false
          - build_name: 'Ubuntu 24.04 - Clang 16'
            package_name: 'clang-16'
            cc: clang-16
            cxx: clang++-16
            label: ubuntu-24.04-linux-clang-16
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
      - name: Setup ccache
        run: |
          sudo apt install ccache
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
      # Build for linux
      - name: Build
        run: |
          cd build
          make 
      # Test the crypto
      - name: Test Crypto
        run: |
          cd build/src
          ./cryptotest      
            
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="Zentd miner zentwallet cryptotest Zent-service wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf ZentCash-${TAG}
          mkdir ZentCash-${TAG}
          cp ${TARGETS} ZentCash-${TAG}/
          cp ../../LICENSE ZentCash-${TAG}/
          tar cvfz ZentCash-${TAG}-${LABEL}.tar.gz ZentCash-${TAG}/
          ls -la
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZentCash-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/ZentCash-${{ github.sha }} 

          

  macos_build:
    name: macOS
    runs-on: macos-13
    env:
      CC: /usr/local/opt/llvm@15/bin/clang
      CXX: /usr/local/opt/llvm@15/bin/clang++
      LABEL: osx
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
           brew install --force boost llvm@15 ccache
           brew reinstall llvm@15
           brew link --overwrite llvm@15
           ln -s /usr/local/opt/llvm@15 /usr/local/opt/llvm
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-osx

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
      # Build for macOS
      - name: Build
        run: |
          cd build
          make -j2
      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build/src
          ./cryptotest
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="Zentd miner zentwallet cryptotest Zent-service wallet-api wallet-upgrader"
          strip ${TARGETS}
          rm -rf ZentCash-${TAG}
          mkdir ZentCash-${TAG}
          cp ${TARGETS} ZentCash-${TAG}/
          cp ../../LICENSE ZentCash-${TAG}/
          tar cvfz ZentCash-${TAG}-${LABEL}.tar.gz ZentCash-${TAG}/

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_name: ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.tar.gz
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZentCash-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/ZentCash-${{ github.sha }}

  windows_build:
    name: Windows
    runs-on: windows-latest
    env:
      MSBUILD_PATH: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v4

      - name: Setup clcache
        run: pip install clcache

      - name: Retrieve clcache
        uses: actions/cache@v4
        with:
          path: clcache
          key: clcache-windows

      - name: Install OpenSSL
        run: choco install openssl

      # Install boost
      - name: Install Boost 1.87.0
        run: |
          $link = "https://boost.teeks99.com/bin/1.87.0/boost_1_87_0-msvc-14.2-64.exe"
          $path = "C:\boost.exe"
          [Net.WebClient]::new().DownloadFile($link, $path)
          Start-Process C:\boost.exe -ArgumentList "/DIR=C:\local\boost_1_87_0","/VERYSILENT" -Wait
          Get-ChildItem C:\local\boost_1_87_0
      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 .. -DARCH=default -DBOOST_ROOT=C:/local/boost_1_87_0 -DCMAKE_BUILD_TYPE=Debug
      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild ZentCash.sln /p:Configuration=Debug /p:PlatformToolset=v142 /m
      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build
          rm -rf ZentCash-${TAG}
          mkdir ZentCash-${TAG}
          cp *.exe ZentCash-${TAG}/
          cp ../../../LICENSE ZentCash-${TAG}/
          7z a ZentCash-${TAG}-${LABEL}.zip ZentCash-${TAG}/

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_name: ZentCash-${{ github.event.release.tag_name }}-${{ env.LABEL }}.zip
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZentCash-${{ github.sha }}-${{ env.LABEL }}
          path: ./build/src/Release/ZentCash-${{ github.sha }}
